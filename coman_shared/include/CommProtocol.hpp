/*
	CommProtocol.hpp

	Copyright (C) 2010 Italian Institute of Technology

	Developer:
		Sabino Colonna (2010-, sabino.colonna@iit.it)
*/

#ifndef _COMM_PROTOCOL_HPP_
#define _COMM_PROTOCOL_HPP_

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>

#include <exception>
#include <stdexcept>

#define HEADER_SIZE      3
#define MAX_PAYLOAD_SIZE 1024

#define TCP_COMMAND 0xFF
#define TCP_REPLY   0xFE
#define UDP_COMMAND 0xFF
#define UDP_REPLY   0xFE
#define UDP_BCAST   0xFD

#define PROGRAMMED_FW_VER_PCK_SIZE 28
#define PROGRAMMED_FW_VER_VERSION_SIZE (8+1) //string length INCLUDING the terminator character
#define PROGRAMMED_FW_VER_DATETIME_SIZE (20+1)//string length INCLUDING the terminator character

// List of commands
enum Commands
{
	// TCP Commands
	GET_BOARD_TYPE,
	GET_FIRMWARE_VERSION,
	SET_FIRMWARE_VERSION,
	CLEAR_BOARD_FAULT,
	GET_BOARD_FAULT,
	SET_PID_GAINS,
	GET_PID_GAINS,
	SET_PID_GAIN_SCALE,
	GET_PID_GAIN_SCALE,
	SET_ILIM_GAIN,
	GET_ILIM_GAIN,
	GET_PID_ERROR,
	GET_PID_OUTPUT,
	GET_ENCODER_POSITION,
	GET_ABSOLUTE_POSITION,
	GET_ENCODER_VELOCITY,
	GET_MEASURED_TORQUE,
	GET_ENCODER_ANGLE,
	GET_DESIRED_POSITION,
	GET_DESIRED_VELOCITY,
	GET_DESIRED_TORQUE,
	GET_DESIRED_ANGLE,
	SET_ACCELERATION,
	GET_ACCELERATION,
	SET_MIN_POSITION,
	GET_MIN_POSITION,
	SET_MAX_POSITION,
	GET_MAX_POSITION,
	SET_MAX_VELOCITY,
	GET_MAX_VELOCITY,
	SET_MAX_TORQUE,
	GET_MAX_TORQUE,
	SET_MIN_VELOCITY,
	GET_MIN_VELOCITY,
	GET_PID_OFFSET,
	SET_CURRENT_LIMIT,
	GET_CURRENT_LIMIT,
	SET_BCAST_RATE,
	GET_BCAST_RATE,
	SET_BCAST_POLICY,
	GET_BCAST_POLICY,
	SET_ENCODER_LINES,
	GET_ENCODER_LINES,
	SET_MOTOR_POLES,
	GET_MOTOR_POLES,
	SET_ANALOG_INPUTS,
	GET_ANALOG_INPUTS,
	CMD_UPGRADE,
	SAVE_PARAMS_TO_FLASH,
	LOAD_PARAMS_FROM_FLASH,
	LOAD_DEFAULT_PARAMS,
	CONTROLLER_RUN,
	CONTROLLER_IDLE,
	ENABLE_PWM_PAD,
	DISABLE_PWM_PAD,
	SET_TORQUE_FACTORS,
	GET_TORQUE_FACTORS,
	SET_TORQUE_ON_OFF,
	GET_TORQUE_ON_OFF,
	DO_CALIBRATE,
	SET_CALIBRATION_CURRENT,
	GET_CALIBRATION_CURRENT,
	SET_ABSOLUTE_ZERO,
	GET_ABSOLUTE_ZERO,
	SET_TORQUE_ACCELERATION,
	GET_TORQUE_ACCELERATION,
	SET_MOTOR_TYPE,
	GET_MOTOR_TYPE,
	SET_MOTOR_CONFIG,
	GET_MOTOR_CONFIG,
    DEFINE_CALIBRATION_POSITION,

    CALIBRATE_TORQUE_OFFSET,
    SET_SENSOR_TYPE,
    GET_SENSOR_TYPE,
    SET_FILTER_SAMPLES,
    GET_FILTER_SAMPLES,
    GET_GRAVITY_COMPENSATION,
    SET_MOTOR_CONFIG2,
    GET_MOTOR_CONFIG2,
    SET_DAC_OUTPUT,
    GET_DAC_OUTPUT,

    CALIBRATE_OFFSETS,
	GET_CALIBRATION_OFFSETS,
	SET_RESOLUTION,
	GET_RESOLUTION,
	SET_CONVERSION_FACTORS,
	GET_CONVERSION_FACTORS,
	SET_AVERAGE_SAMPLES,
	GET_AVERAGE_SAMPLES,
	SET_MATRIX_ROW,
	GET_MATRIX_ROW,

	GET_PROGRAMMED_FIRMWARE_VERSION,
    SET_EXTRA_BCAST_POLICY,

	// TCP Replies
	REPLY_BOARD_TYPE,
	REPLY_FIRMWARE_VERSION,
	REPLY_BOARD_FAULT,
	REPLY_PID_GAINS,
	REPLY_PID_GAIN_SCALE,
	REPLY_ILIM_GAIN,
	REPLY_PID_ERROR,
	REPLY_PID_OUTPUT,
	REPLY_ENCODER_POSITION,
	REPLY_ABSOLUTE_POSITION,
	REPLY_ENCODER_VELOCITY,
	REPLY_MEASURED_TORQUE,
	REPLY_ENCODER_ANGLE,
	REPLY_DESIRED_POSITION,
	REPLY_DESIRED_VELOCITY,
	REPLY_DESIRED_TORQUE,
	REPLY_DESIRED_ANGLE,
	REPLY_ACCELERATION,
	REPLY_MIN_POSITION,
	REPLY_MAX_POSITION,
	REPLY_MAX_VELOCITY,
	REPLY_MIN_VELOCITY,
	REPLY_MAX_TORQUE,
	REPLY_PID_OFFSET,
	REPLY_CURRENT_LIMIT,
	REPLY_BCAST_RATE,
	REPLY_BCAST_POLICY,
	REPLY_ENCODER_LINES,
	REPLY_MOTOR_POLES,
	REPLY_ANALOG_INPUTS,
	REPLY_TORQUE_FACTORS,
	REPLY_TORQUE_ON_OFF,
	REPLY_CALIBRATION_CURRENT,
	REPLY_ABSOLUTE_ZERO,
	REPLY_TORQUE_ACCELERATION,
	REPLY_MOTOR_TYPE,
	REPLY_MOTOR_CONFIG,

    REPLY_SENSOR_TYPE,
    REPLY_FILTER_SAMPLES,
    REPLY_GRAVITY_COMPENSATION,
    REPLY_MOTOR_CONFIG2,
    REPLY_DAC_OUTPUT,

	REPLY_CALIBRATION_OFFSETS,
	REPLY_RESOLUTION,
	REPLY_CONVERSION_FACTORS,
	REPLY_AVERAGE_SAMPLES,
	REPLY_MATRIX_ROW,

	REPLY_PROGRAMMED_FIRMWARE_VERSION,

	// UDP Commands
	CHECK_PROTOCOL,
	GET_ACTIVE_BOARDS,
	SET_DESIRED_POSITION,
	SET_DESIRED_VELOCITY,
	SET_DESIRED_POS_VEL,
	SET_DESIRED_TORQUE,
	SET_DESIRED_ANGLE,
	SET_PID_OFFSET,
	POSITION_MOVE,
	VELOCITY_MOVE,
	TORQUE_MOVE,
    SET_STIFFNESS_DAMPING,
    SET_GRAVITY_COMPENSATION,
    SET_DESIRED_POSITION_GROUP,
    SET_DESIRED_VELOCITY_GROUP,
	SET_DESIRED_POS_VEL_GROUP,
	SET_DESIRED_TORQUE_GROUP,
    SET_STIFFNESS_DAMPING_GROUP,

	// UDP Replies
	REPLY_CHECK_PROTOCOL_MOTOR,
	REPLY_CHECK_PROTOCOL_SENSOR,
	REPLY_ACTIVE_BOARDS,

	// UDP Broadcasts
	BCAST_DATA_PACKET_MOTOR,
	BCAST_DATA_PACKET_SENSOR,

	NUM_OF_COMMANDS
};

typedef struct CmdInfo
{
	uint8_t cmdType;
	uint8_t cmdId;
} CmdInfo;

// Must match 'Commands' enum
const CmdInfo cmdsInfo[NUM_OF_COMMANDS] =
{
	{ TCP_COMMAND, 0x10 }, // GET_BOARD_TYPE
	{ TCP_COMMAND, 0x11 }, // GET_FIRMWARE_VERSION
	{ TCP_COMMAND, 0x51 }, // SET_FIRMWARE_VERSION
	{ TCP_COMMAND, 0x52 }, // CLEAR_BOARD_FAULT
	{ TCP_COMMAND, 0xEF }, // GET_BOARD_FAULT
	{ TCP_COMMAND, 0x53 }, // SET_PID_GAINS
	{ TCP_COMMAND, 0x13 }, // GET_PID_GAINS
	{ TCP_COMMAND, 0x54 }, // SET_PID_GAIN_SCALE
	{ TCP_COMMAND, 0x14 }, // GET_PID_GAIN_SCALE
	{ TCP_COMMAND, 0x55 }, // SET_ILIM_GAIN
	{ TCP_COMMAND, 0x15 }, // GET_ILIM_GAIN
	{ TCP_COMMAND, 0x16 }, // GET_PID_ERROR
	{ TCP_COMMAND, 0x17 }, // GET_PID_OUTPUT
	{ TCP_COMMAND, 0x18 }, // GET_ENCODER_POSITION
	{ TCP_COMMAND, 0x4A }, // GET_ABSOLUTE_POSITION
	{ TCP_COMMAND, 0x19 }, // GET_ENCODER_VELOCITY
	{ TCP_COMMAND, 0x1A }, // GET_MEASURED_TORQUE
	{ TCP_COMMAND, 0x7B }, // GET_ENCODER_ANGLE
	{ TCP_COMMAND, 0x1B }, // GET_DESIRED_POSITION
	{ TCP_COMMAND, 0x1C }, // GET_DESIRED_VELOCITY
	{ TCP_COMMAND, 0x1D }, // GET_DESIRED_TORQUE
	{ TCP_COMMAND, 0x7C }, // GET_DESIRED_ANGLE
	{ TCP_COMMAND, 0x5E }, // SET_ACCELERATION
	{ TCP_COMMAND, 0x1E }, // GET_ACCELERATION
	{ TCP_COMMAND, 0x60 }, // SET_MIN_POSITION
	{ TCP_COMMAND, 0x20 }, // GET_MIN_POSITION
	{ TCP_COMMAND, 0x61 }, // SET_MAX_POSITION
	{ TCP_COMMAND, 0x21 }, // GET_MAX_POSITION
	{ TCP_COMMAND, 0x62 }, // SET_MAX_VELOCITY
	{ TCP_COMMAND, 0x22 }, // GET_MAX_VELOCITY
	{ TCP_COMMAND, 0x63 }, // SET_MAX_TORQUE
	{ TCP_COMMAND, 0x23 }, // GET_MAX_TORQUE
	{ TCP_COMMAND, 0x6D }, // SET_MIN_VELOCITY
	{ TCP_COMMAND, 0x2F }, // GET_MIN_VELOCITY
	{ TCP_COMMAND, 0x24 }, // GET_PID_OFFSET
	{ TCP_COMMAND, 0x65 }, // SET_CURRENT_LIMIT
	{ TCP_COMMAND, 0x25 }, // GET_CURRENT_LIMIT
	{ TCP_COMMAND, 0x66 }, // SET_BCAST_RATE
	{ TCP_COMMAND, 0x26 }, // GET_BCAST_RATE
	{ TCP_COMMAND, 0x67 }, // SET_BCAST_POLICY
	{ TCP_COMMAND, 0x27 }, // GET_BCAST_POLICY
	{ TCP_COMMAND, 0x68 }, // SET_ENCODER_LINES
	{ TCP_COMMAND, 0x28 }, // GET_ENCODER_LINES
	{ TCP_COMMAND, 0x69 }, // SET_MOTOR_POLES
	{ TCP_COMMAND, 0x29 }, // GET_MOTOR_POLES
	{ TCP_COMMAND, 0x6A }, // SET_ANALOG_INPUTS
	{ TCP_COMMAND, 0x2A }, // GET_ANALOG_INPUTS
	{ TCP_COMMAND, 0x01 }, // CMD_UPGRADE
	{ TCP_COMMAND, 0x2B }, // SAVE_PARAMS_TO_FLASH
	{ TCP_COMMAND, 0x2C }, // LOAD_PARAMS_FROM_FLASH
	{ TCP_COMMAND, 0x2D }, // LOAD_DEFAULT_PARAMS
	{ TCP_COMMAND, 0x32 }, // CONTROLLER_RUN
	{ TCP_COMMAND, 0x33 }, // CONTROLLER_IDLE
	{ TCP_COMMAND, 0x34 }, // ENABLE_PWM_PAD
	{ TCP_COMMAND, 0x35 }, // DISABLE_PWM_PAD
	{ TCP_COMMAND, 0x75 }, // SET_TORQUE_FACTORS
	{ TCP_COMMAND, 0x7D }, // GET_TORQUE_FACTORS
	{ TCP_COMMAND, 0x76 }, // SET_TORQUE_ON_OFF,
	{ TCP_COMMAND, 0x7E }, // GET_TORQUE_ON_OFF,

	{ TCP_COMMAND, 0x6B }, // DO_CALIBRATE
	{ TCP_COMMAND, 0x6C }, // SET_CALIBRATION_CURRENT
	{ TCP_COMMAND, 0x2E }, // GET_CALIBRATION_CURRENT
	{ TCP_COMMAND, 0x84 }, // SET_ABSOLUTE_ZERO
	{ TCP_COMMAND, 0x44 }, // GET_ABSOLUTE_ZERO
	{ TCP_COMMAND, 0x85 }, // SET_TORQUE_ACCELERATION
	{ TCP_COMMAND, 0x45 }, // GET_TORQUE_ACCELERATION
	{ TCP_COMMAND, 0x86 }, // SET_MOTOR_TYPE
	{ TCP_COMMAND, 0x46 }, // GET_MOTOR_TYPE
	{ TCP_COMMAND, 0x77 }, // SET_MOTOR_CONFIG
	{ TCP_COMMAND, 0x7F }, // GET_MOTOR_CONFIG
    { TCP_COMMAND, 0x3D }, // DEFINE_CALIBRATION_POSITION

    { TCP_COMMAND, 0x3B }, // CALIBRATE_TORQUE_OFFSET,
    { TCP_COMMAND, 0x8A }, // SET_SENSOR_TYPE,
    { TCP_COMMAND, 0x5A }, // GET_SENSOR_TYPE,
    { TCP_COMMAND, 0x74 }, // SET_FILER_SAMPLES,
    { TCP_COMMAND, 0x5B }, // GET_FILTER_SAMPLES,
    { TCP_COMMAND, 0x5C }, // GET_GRAVITY_COMPENSATION,
    { TCP_COMMAND, 0x6F }, // SET_MOTOR_CONFIG2,
    { TCP_COMMAND, 0x3F }, // GET_MOTOR_CONFIG2,
    { TCP_COMMAND, 0x8E }, // SET_DAC_OUTPUT,
    { TCP_COMMAND, 0x4E }, // GET_DAC_OUTPUT,

	{ TCP_COMMAND, 0x3B }, // CALIBRATE_OFFSETS
	{ TCP_COMMAND, 0x40 }, // GET_CALIBRATION_OFFSETS
	{ TCP_COMMAND, 0x81 }, // SET_RESOLUTION
	{ TCP_COMMAND, 0x41 }, // GET_RESOLUTION
	{ TCP_COMMAND, 0x83 }, // SET_CONVERSION_FACTORS
	{ TCP_COMMAND, 0x43 }, // GET_CONVERSION_FACTORS
	{ TCP_COMMAND, 0x30 }, // SET_AVERAGE_SAMPLES
	{ TCP_COMMAND, 0x3C }, // GET_AVERAGE_SAMPLES
	{ TCP_COMMAND, 0x31 }, // SET_MATRIX_ROW
	{ TCP_COMMAND, 0x38 }, // GET_MATRIX_ROW

	{ TCP_COMMAND, 0x59 }, // GET_PROGRAMMED_FIRMWARE_VERSION
    { TCP_COMMAND, 0x8F }, // SET_EXTRA_BCAST_POLICY

	{ TCP_REPLY, 0x90 }, // REPLY_BOARD_TYPE
	{ TCP_REPLY, 0x91 }, // REPLY_FIRMWARE_VERSION
	{ TCP_REPLY, 0x92 }, // REPLY_BOARD_FAULT
	{ TCP_REPLY, 0x93 }, // REPLY_PID_GAINS
	{ TCP_REPLY, 0x94 }, // REPLY_PID_GAIN_SCALE
	{ TCP_REPLY, 0x95 }, // REPLY_ILIM_GAIN
	{ TCP_REPLY, 0x96 }, // REPLY_PID_ERROR
	{ TCP_REPLY, 0x97 }, // REPLY_PID_OUTPUT
	{ TCP_REPLY, 0x98 }, // REPLY_ENCODER_POSITION
	{ TCP_REPLY, 0xCA }, // REPLY_ABSOLUTE_POSITION
	{ TCP_REPLY, 0x99 }, // REPLY_ENCODER_VELOCITY
	{ TCP_REPLY, 0x9A }, // REPLY_MEASURED_TORQUE
	{ TCP_REPLY, 0xB3 }, // REPLY_ENCODER_ANGLE
	{ TCP_REPLY, 0x9B }, // REPLY_DESIRED_POSITION
	{ TCP_REPLY, 0x9C }, // REPLY_DESIRED_VELOCITY
	{ TCP_REPLY, 0x9D }, // REPLY_DESIRED_TORQUE
	{ TCP_REPLY, 0xB4 }, // REPLY_DESIRED_ANGLE
	{ TCP_REPLY, 0x9E }, // REPLY_ACCELERATION
	{ TCP_REPLY, 0xA0 }, // REPLY_MIN_POSITION
	{ TCP_REPLY, 0xA1 }, // REPLY_MAX_POSITION
	{ TCP_REPLY, 0xA2 }, // REPLY_MAX_VELOCITY
	{ TCP_REPLY, 0xAF }, // REPLY_MIN_VELOCITY
	{ TCP_REPLY, 0xA3 }, // REPLY_MAX_TORQUE
	{ TCP_REPLY, 0xA4 }, // REPLY_PID_OFFSET
	{ TCP_REPLY, 0xA5 }, // REPLY_CURRENT_LIMIT
	{ TCP_REPLY, 0xA6 }, // REPLY_BCAST_RATE
	{ TCP_REPLY, 0xA7 }, // REPLY_BCAST_POLICY
	{ TCP_REPLY, 0xA8 }, // REPLY_ENCODER_LINES
	{ TCP_REPLY, 0xA9 }, // REPLY_MOTOR_POLES
	{ TCP_REPLY, 0xAA }, // REPLY_ANALOG_INPUTS
	{ TCP_REPLY, 0xB5 }, // REPLY_TORQUE_FACTORS
	{ TCP_REPLY, 0xB6 }, // REPLY_TORQUE_ON_OFF
	{ TCP_REPLY, 0xAE }, // REPLY_CALIBRATION_CURRENT
	{ TCP_REPLY, 0xC4 }, // REPLY_ABSOLUTE_ZERO
	{ TCP_REPLY, 0xC5 }, // REPLY_TORQUE_ACCELERATION
	{ TCP_REPLY, 0xC6 }, // REPLY_MOTOR_TYPE
	{ TCP_REPLY, 0xB7 }, // REPLY_MOTOR_CONFIG

    { TCP_REPLY, 0xBA }, // REPLY_SENSOR_TYPE,
    { TCP_REPLY, 0xBB }, // REPLY_FILTER_SAMPLES,
    { TCP_REPLY, 0xBC }, // REPLY_GRAVITY_COMPENSATION,
    { TCP_REPLY, 0x9F }, // REPLY_MOTOR_CONFIG2,
    { TCP_REPLY, 0xCE }, // REPLY_DAC_OUTPUT,

	{ TCP_REPLY, 0xC0 }, // REPLY_CALIBRATION_OFFSETS
	{ TCP_REPLY, 0xC1 }, // REPLY_RESOLUTION
	{ TCP_REPLY, 0xC3 }, // REPLY_CONVERSION_FACTORS
	{ TCP_REPLY, 0xAC }, // REPLY_AVERAGE_SAMPLES
	{ TCP_REPLY, 0xAB }, // REPLY_MATRIX_ROW

	{ TCP_REPLY, 0xB9 }, // REPLY_PROGRAMMED_FIRMWARE_VERSION

	{ UDP_COMMAND, 0x01 }, // CHECK_PROTOCOL
	{ UDP_COMMAND, 0x02 }, // GET_ACTIVE_BOARDS
	{ UDP_COMMAND, 0x5B }, // SET_DESIRED_POSITION
	{ UDP_COMMAND, 0x5C }, // SET_DESIRED_VELOCITY
	{ UDP_COMMAND, 0x5E }, // SET_DESIRED_POS_VEL
	{ UDP_COMMAND, 0x5D }, // SET_DESIRED_TORQUE
	{ UDP_COMMAND, 0x5F }, // SET_DESIRED_ANGLE
	{ UDP_COMMAND, 0x64 }, // SET_PID_OFFSET
	{ UDP_COMMAND, 0x36 }, // POSITION_MOVE
	{ UDP_COMMAND, 0x37 }, // VELOCITY_MOVE
	{ UDP_COMMAND, 0x38 }, // TORQUE_MOVE
    { UDP_COMMAND, 0x59 }, // SET_STIFFNESS_DAMPING
    { UDP_COMMAND, 0x58 }, // SET_GRAVITY_COMPENSATION
    { UDP_COMMAND, 0x6B }, // SET_DESIRED_POSITION_GROUP
    { UDP_COMMAND, 0x6C }, // SET_DESIRED_VELOCITY_GROUP
    { UDP_COMMAND, 0x6E }, // SET_DESIRED_POS_VEL_GROUP
    { UDP_COMMAND, 0x6D }, // SET_DESIRED_TORQUE_GROUP
    { UDP_COMMAND, 0x69 }, // SET_STIFFNESS_DAMPING_GROUP

	{ UDP_REPLY, 0x81 }, // REPLY_CHECK_PROTOCOL_MOTOR
	{ UDP_REPLY, 0x83 }, // REPLY_CHECK_PROTOCOL_SENSOR
	{ UDP_REPLY, 0x82 }, // REPLY_ACTIVE_BOARDS

	{ UDP_BCAST, 0xBB }, // BCAST_DATA_PACKET_MOTOR
	{ UDP_BCAST, 0xBC }, // BCAST_DATA_PACKET_SENSOR
};

class Ooops : public std::runtime_error {};


// Communication packet
class CommPacket
{
	public:
		CommPacket(int cmdId);
		uint8_t getPayloadSize();
		int appendData(const uint8_t *data, int nBytes);
		int readData(uint8_t *data, int nBytes);
        int getContent(uint8_t *dst);

	protected:
		static const uint8_t OFFSET_CMD_TYPE     = 0;
		static const uint8_t OFFSET_PAYLOAD_SIZE = sizeof(OFFSET_CMD_TYPE);
		static const uint8_t OFFSET_CMD_ID       = OFFSET_PAYLOAD_SIZE + sizeof(OFFSET_PAYLOAD_SIZE);

		uint8_t cmdType;
		uint8_t cmdId;
		uint8_t payloadSize;

		int readOffset;
		int writeOffset;

		uint8_t content[HEADER_SIZE+MAX_PAYLOAD_SIZE+1]; // 1 = checksum

		bool verifyHeader();
		void fillHeader();
		bool verifyChecksum();
		void setChecksum();
};

class TCPCommPacket : public CommPacket
{
	public:
		TCPCommPacket(int cmdId);
		int sendToTCPSocket(int socketId);
		int recvFromTCPSocket(int socketId);
};

class UDPCommPacket : public CommPacket
{
	public:
		UDPCommPacket(int cmdId);
		int sendToUDPSocket(int socketId, sockaddr *to, socklen_t toLen);
		int recvFromUDPSocket(int socketId, sockaddr *from, socklen_t *fromLen);
};


#endif // _COMM_PROTOCOL_HPP_
